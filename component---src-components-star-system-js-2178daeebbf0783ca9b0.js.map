{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/header.js","webpack:///./src/components/planet.js","webpack:///./src/components/systemVisualization/orbitVisualization.js","webpack:///./src/components/systemVisualization/planetSizeVisualizationPlanet.js","webpack:///./src/components/systemVisualization/planetSizeVisualization.js","webpack:///./src/components/systemVisualization/systemVisualization.js","webpack:///./src/components/star.js","webpack:///./src/components/starSystem.js","webpack:///./src/util/astronomyUtil.js"],"names":["Layout","children","useColorMode","colorMode","setColorMode","data","sx","margin","maxWidth","padding","siteTitle","site","siteMetadata","title","display","gridAutoFlow","li","fontSize","to","onClick","e","border","borderRadius","cursor","Header","textAlign","defaultProps","Planet","planet","id","planetName","gridTemplateColumns","gridAutoRows","gridGap","borderBottom","mass","toFixed","radius","isRadiusPredicted","temperature","orbit","period","semiMajorAxis","discoveryMethod","split","join","discoveryYear","OrbitVisualization","star","scale","Math","max","planets","map","p","innerHabRadius","luminosity","sqrt","outerHabRadius","width","height","viewBox","stroke","fill","cx","cy","r","key","strokeWidth","PlanetSizeVisualizationPlanet","size","xPosition","color","name","href","PlanetSizeVisualization","solarRadius","colorTemperatureKelvinToRgb","starColor","red","green","blue","planetColorForTemperature","floor","min","abs","currentPosition","planetVisualizationData","planetPosition","SystemVisualization","Star","starName","length","spectralType","absoluteMagnitude","marginLeft","sort","a","b","pageContext","rightAscension","declination","distance","stars","starId","kelvin","asHexadecimal","temp","log","pow","round","clamp","x"],"mappings":"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","file":"component---src-components-star-system-js-2178daeebbf0783ca9b0.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\r\nimport { useColorMode } from 'theme-ui'\r\n\r\nimport Header from \"./header\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n  const [colorMode, setColorMode] = useColorMode()\r\n  const data = useStaticQuery(graphql`\r\n    query SiteTitleQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        sx={{\r\n          margin: `0 auto`,\r\n          maxWidth: 900,\r\n          padding: `0 5`\r\n        }}\r\n      >\r\n        <Header siteTitle={data.site.siteMetadata.title} />\r\n        <nav>\r\n          <ul\r\n            sx={{\r\n              display: `grid`,\r\n              gridAutoFlow: `column`,\r\n              li: {\r\n                display: `inline`,\r\n                fontSize: 3\r\n              },\r\n            }}\r\n          >\r\n            <li><Link to=\"/stars-in-15-ly/\">All Star Systems - 15ly</Link></li>\r\n            <li><Link to=\"/planets-in-50-ly/\">Stars With Planets - 50ly</Link></li>\r\n            <li><Link to=\"/search\">Search Systems</Link></li>\r\n            <li>\r\n              <span\r\n                onClick={e => {setColorMode(colorMode === 'default' ? 'dark' : 'default')}}\r\n                sx={{\r\n                  border: `3px solid #777`,\r\n                  borderRadius: 2,\r\n                  padding: 1,\r\n                  cursor: `pointer`\r\n                }}\r\n              >\r\n                {colorMode === 'default' ? 'Light Theme' : 'Dark Theme'}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <main>{children}</main>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n  \r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n  \r\nexport default Layout","import { Link } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst Header = ({ siteTitle }) => (\r\n  <header>\r\n    <div>\r\n      <Link to=\"/\">\r\n        <h1 sx={{ \r\n          textAlign: `center`,\r\n          fontSize: 7 \r\n        }}>\r\n          {siteTitle}\r\n        </h1>\r\n      </Link>\r\n    </div>\r\n  </header>\r\n)\r\n\r\nHeader.propTypes = {\r\n  siteTitle: PropTypes.string,\r\n}\r\n\r\nHeader.defaultProps = {\r\n  siteTitle: ``,\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\n\r\n// @jsx jsx\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst Planet = ({ planet }) => (\r\n  <div id={planet.planetName}>\r\n    <h3>{planet.planetName}</h3>\r\n    <div\r\n      sx = {{\r\n        display: `grid`,\r\n        gridTemplateColumns: `auto 1fr`,\r\n        gridAutoRows: `1.75rem`,\r\n        gridGap: `0 20px`,\r\n        \r\n        borderBottom: `1px solid #777`\r\n      }}\r\n    >\r\n      { planet.mass ? <strong>Mass:</strong> : ``}\r\n      { planet.mass ? <span>{planet.mass.toFixed(2)} M<sub>E</sub></span> : ``}\r\n\r\n      <strong>Radius:</strong>\r\n      <span>\r\n        {planet.radius.toFixed(2)} R<sub>E</sub>\r\n        {planet.isRadiusPredicted ? <span> (Estimation based on mass)</span> : ``}\r\n      </span>\r\n\r\n      <strong>Temperature:</strong>\r\n      <span>{planet.temperature} {planet.temperature ? `K` : ``}</span>\r\n\r\n      <strong>Length of Year:</strong>\r\n      <span>{planet.orbit.period.toFixed(2)} Earth Days</span>\r\n\r\n      <strong>Distance From Star:</strong>\r\n      <span>{planet.orbit.semiMajorAxis.toFixed(3)} AU</span>      \r\n\r\n      <strong>Discovery Method:</strong>\r\n      <span>{planet.discoveryMethod ? planet.discoveryMethod.split(`_`).join(` `) : ``}</span>\r\n\r\n      <strong>Year Discovered:</strong>\r\n      <span>{planet.discoveryYear}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Planet","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx, useColorMode } from \"theme-ui\"\r\n\r\nconst OrbitVisualization = ({star}) => {\r\n  const [ colorMode ] = useColorMode()\r\n  const scale = 700 / Math.max(...star.planets.map(p => p.orbit.semiMajorAxis))\r\n  const innerHabRadius = star.luminosity ? Math.sqrt(star.luminosity) * 0.95 : null\r\n  const outerHabRadius = star.luminosity ? Math.sqrt(star.luminosity) * 1.37 : null\r\n\r\n  return (\r\n    <svg\r\n      width=\"900px\"\r\n      height=\"200px\"\r\n      viewBox=\"0 0 900 200\"\r\n      sx = {{\r\n        border: `1px solid #777`\r\n      }}\r\n    >\r\n      {outerHabRadius ?\r\n        <circle \r\n          stroke=\"stroke\"\r\n          fill=\"green\"\r\n          cx=\"0\"\r\n          cy=\"100\"\r\n          r={outerHabRadius * scale}\r\n        />\r\n      : ``}\r\n      {innerHabRadius ?\r\n        <circle\r\n          stroke=\"stroke\"\r\n          fill={colorMode === `default` ? `#fff` : `#000`}\r\n          cx=\"0\"\r\n          cy=\"100\"\r\n          r={innerHabRadius * scale}\r\n        />\r\n      : ``}\r\n      {star.planets.map(planet => (\r\n        <circle\r\n          key={planet.id} \r\n          stroke={colorMode === `default` ? `#000` : `#fff`}\r\n          strokeWidth={2}\r\n          fill=\"none\"\r\n          cx=\"0\"\r\n          cy=\"100\"\r\n          r={planet.orbit.semiMajorAxis * scale}\r\n        />\r\n      ))}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default OrbitVisualization\r\n","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\nimport { Link } from 'gatsby'\r\n\r\nconst PlanetSizeVisualizationPlanet = ({ size, xPosition, color, name }) => {\r\n    \r\n  return (\r\n    <g>\r\n      <a href={`#${name}`}><circle cx={xPosition} cy={100} r={size} fill={color} /></a>\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default PlanetSizeVisualizationPlanet\r\n","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nimport PlanetSizeVisualizationPlanet from \"./planetSizeVisualizationPlanet\"\r\nimport { colorTemperatureKelvinToRgb } from \"../../util/astronomyUtil\";\r\n\r\nconst PlanetSizeVisualization = ({star}) => {\r\n  const scalingFactor = 8\r\n  const earthRadiusTosolarRadius = 109\r\n\r\n  const solarRadius = star.radius ? star.radius * scalingFactor * earthRadiusTosolarRadius : null\r\n  const { red, green, blue } = colorTemperatureKelvinToRgb(star.temperature)\r\n  const starColor = `rgb(${red},${green},${blue})`\r\n\r\n  const planetColorForTemperature = (temperature) => {\r\n    const red = Math.floor(Math.min(255, Math.max(temperature - 300, 0)))\r\n    const blue = Math.floor(Math.max(255 - temperature, 0))\r\n    const green = Math.floor(Math.max(0, 255 - 2 * Math.abs(300 - temperature)))\r\n    return `rgb(${red},${green},${blue})`\r\n  }\r\n\r\n  let currentPosition = 60;\r\n  const planetVisualizationData = star.planets.map(planet => {\r\n    currentPosition += scalingFactor * planet.radius\r\n    const planetPosition = currentPosition\r\n    currentPosition += scalingFactor * planet.radius + scalingFactor\r\n    return {\r\n      id: planet.id,\r\n      size: scalingFactor * planet.radius,\r\n      xPosition: planetPosition,\r\n      color: planet.temperature ? planetColorForTemperature(planet.temperature) : `#777`,\r\n      name: planet.planetName\r\n    }\r\n  })\r\n\r\n  return (\r\n    <svg \r\n      width=\"900px\" \r\n      height=\"200px\"\r\n      viewBox=\"0 0 900 200\"\r\n      sx = {{\r\n        border: `1px solid #777`\r\n      }}\r\n    >\r\n      {solarRadius ?\r\n        (<circle\r\n          cx={-solarRadius + 50}\r\n          cy={100}\r\n          r={solarRadius}\r\n          fill={starColor}\r\n        ></circle>) : ``}\r\n      {planetVisualizationData.map(planet => (\r\n        <PlanetSizeVisualizationPlanet\r\n          key={planet.id}\r\n          size={planet.size}\r\n          xPosition={planet.xPosition}\r\n          color={planet.color}\r\n          name={planet.name}\r\n        />\r\n      ))}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default PlanetSizeVisualization\r\n","import React from \"react\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\nimport OrbitVisualization from \"./orbitVisualization\"\r\nimport PlanetSizeVisualization from \"./planetSizeVisualization\"\r\n\r\nconst SystemVisualization = ({ star }) => (\r\n  <div sx={{\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"900px\",\r\n    gridGap: 10,\r\n  }}>\r\n    <span>\r\n      Star and Planet Sizes (Star color is actual, planet colors indicate relative warmth)\r\n    </span>\r\n    <PlanetSizeVisualization star={star} />\r\n    <span>\r\n      Planet Orbits (Green band represents habitable zone)\r\n    </span>\r\n    <OrbitVisualization star={star} />\r\n  </div>\r\n)\r\n\r\nexport default SystemVisualization","import React from \"react\"\r\nimport Planet from \"./planet\"\r\n\r\n// @jsx jsx\r\nimport { jsx } from 'theme-ui'\r\n\r\nimport SystemVisualization from \"./systemVisualization/systemVisualization\"\r\n\r\nconst Star = ({ star }) => (\r\n  <div>\r\n    <h2>\r\n      {star.starName}\r\n    </h2>\r\n    {star.planets.length > 0 ? <SystemVisualization star={ star } /> : ``}\r\n    <div\r\n      sx = {{\r\n        display: `grid`,\r\n        gridTemplateColumns: `auto 1fr`,\r\n        gridAutoRows: `1.75rem`,\r\n        gridGap: `0 20px`,\r\n        borderBottom: `3px solid #777`\r\n      }}\r\n    >\r\n      <strong>Spectral Classification:</strong>\r\n      <span>{star.spectralType}</span>\r\n\r\n      <strong>Absolute Magnitude:</strong>\r\n      <span>{star.absoluteMagnitude ? star.absoluteMagnitude.toFixed(3) : `0.000`}</span>\r\n\r\n      <strong>Mass:</strong>\r\n      <span>{star.mass ? star.mass.toFixed(3) : ``} M<sub>Sun</sub></span>\r\n\r\n      <strong>Radius:</strong>\r\n      <span>{star.radius ? star.radius.toFixed(3) : ``} R<sub>Sun</sub></span>\r\n\r\n      <strong>Luminosity:</strong>\r\n      <span>{star.luminosity ? star.luminosity.toFixed(3) : ``} L<sub>Sun</sub></span>\r\n\r\n      <strong>Temperature:</strong>\r\n      <span>{star.temperature} K</span>\r\n\r\n      <strong>Year Discovered:</strong>\r\n      <span>{star.discoveryYear}</span>\r\n    </div>\r\n    <div\r\n      sx={{\r\n        marginLeft: 20\r\n      }}\r\n    >\r\n      {star.planets\r\n        .sort((a, b) => a.orbit.semiMajorAxis < b.orbit.semiMajorAxis ? -1 : 1)\r\n        .map(planet =>\r\n        <Planet key={planet.id} planet={planet}></Planet>\r\n      )}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Star","import React from \"react\"\r\nimport Layout from \"./layout\"\r\nimport Star from \"./star\"\r\n\r\n// @jsx jsx\r\nimport { jsx } from 'theme-ui'\r\n\r\nexport default ({ pageContext }) => (\r\n  <Layout>\r\n    <h1>{pageContext.name}</h1>\r\n    <div>\r\n      <em>RA: {pageContext.rightAscension.toFixed(3)}</em> <em>DEC: {pageContext.declination.toFixed(3)}</em>\r\n    </div>\r\n    <div sx={{\r\n      borderBottom: `5px solid #777`\r\n    }}>\r\n      <strong>Distance to Earth:</strong><span> {pageContext.distance.toFixed(2)} LY</span>\r\n    </div>\r\n    {pageContext.stars.map(star =>\r\n      <Star key={star.starId} star={star}></Star>\r\n    )}\r\n  </Layout>\r\n)","/*\r\n  Based on https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html\r\n*/\r\nexport const colorTemperatureKelvinToRgb = (kelvin, asHexadecimal = false) => {\r\n\r\n    const temp = kelvin / 100\r\n    let red, green, blue\r\n\r\n    if (temp <= 66) {\r\n        red = 255\r\n        // new code to make brown dwarfs dimmer\r\n        if (temp < 10) {\r\n            red = 255 * (temp / 10)\r\n        }\r\n\r\n        green = temp\r\n        green = 99.4708025861 * Math.log(green) - 161.1195681661\r\n\r\n        if (temp <= 19) {\r\n            blue = 0\r\n        } else {\r\n            blue = temp - 10;\r\n            blue = 138.5177312231 * Math.log(blue) - 305.0447927307\r\n        }\r\n\r\n    } else {\r\n        red = temp - 60;\r\n        red = 329.698727446 * Math.pow(red, -0.1332047592)\r\n\r\n        green = temp - 60;\r\n        green = 288.1221695283 * Math.pow(green, -0.0755148492)\r\n\r\n        blue = 255\r\n    }\r\n\r\n    if (asHexadecimal) {\r\n      return (Math.round(red)<< 16) | (Math.round(green) << 8) | Math.round(blue)\r\n    } else {\r\n      return {\r\n        red: clamp(red, 0, 255),\r\n        green: clamp(green, 0, 255),\r\n        blue: clamp(blue, 0, 255)\r\n      }\r\n    }\r\n}\r\n\r\nconst clamp = (x, min, max) => {\r\n    if (x < min) { return min }\r\n    if (x > max) { return max }\r\n\r\n    return x\r\n}"],"sourceRoot":""}