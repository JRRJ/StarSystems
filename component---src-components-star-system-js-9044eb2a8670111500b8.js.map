{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/planet.js","webpack:///./src/components/star.js","webpack:///./src/components/systemVisualization/orbitVisualization.js","webpack:///./src/components/systemVisualization/planetSizeVisualizationPlanet.js","webpack:///./src/components/systemVisualization/planetSizeVisualization.js","webpack:///./src/components/systemVisualization/systemVisualization.js","webpack:///./src/components/starSystem.js"],"names":["Header","siteTitle","to","sx","textAlign","fontSize","defaultProps","Layout","children","useColorMode","colorMode","setColorMode","data","margin","maxWidth","padding","site","siteMetadata","title","display","gridAutoFlow","li","onClick","e","Planet","planet","planetName","gridTemplateColumns","gridAutoRows","gridGap","mass","toFixed","radius","temperature","orbit","period","semiMajorAxis","discoveryMethod","Star","star","starName","console","log","spectralType","absoluteMagnitude","luminosity","marginLeft","planets","sort","a","b","map","key","id","OrbitVisualization","scale","Math","max","p","width","height","viewBox","stroke","fill","cx","cy","r","PlanetSizeVisualizationPlanet","size","xPosition","color","name","PlanetSizeVisualization","currentPosition","planetVisualizationData","red","blue","planetPosition","floor","min","abs","SystemVisualization","stars","gridTemplateRows","_","join","starId","pageContext","distance"],"mappings":"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","file":"component---src-components-star-system-js-9044eb2a8670111500b8.js","sourcesContent":["import { Link } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst Header = ({ siteTitle }) => (\r\n  <header>\r\n    <div>\r\n      <Link to=\"/\">\r\n        <h1 sx={{ \r\n          textAlign: `center`,\r\n          fontSize: 7 \r\n        }}>\r\n          {siteTitle}\r\n        </h1>\r\n      </Link>\r\n    </div>\r\n  </header>\r\n)\r\n\r\nHeader.propTypes = {\r\n  siteTitle: PropTypes.string,\r\n}\r\n\r\nHeader.defaultProps = {\r\n  siteTitle: ``,\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\r\nimport { useColorMode } from 'theme-ui'\r\n\r\nimport Header from \"./header\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n  const [colorMode, setColorMode] = useColorMode()\r\n  const data = useStaticQuery(graphql`\r\n    query SiteTitleQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        sx={{\r\n          margin: `0 auto`,\r\n          maxWidth: 960,\r\n          padding: `0 5`\r\n        }}\r\n      >\r\n        <Header siteTitle={data.site.siteMetadata.title} />\r\n        <nav>\r\n          <ul\r\n            sx={{\r\n              display: `grid`,\r\n              gridAutoFlow: `column`,\r\n              li: {\r\n                display: `inline`\r\n              }\r\n            }}\r\n          >\r\n            <li><Link to=\"/stars-in-10-ly/\">Star Systems: 10ly</Link></li>\r\n            <li><Link to=\"/planets-in-100-ly/\">Planets: 100ly</Link></li>\r\n            <li><Link to=\"/search\">Search Systems</Link></li>\r\n            <li>\r\n              <button\r\n                onClick={e => {setColorMode(colorMode === 'default' ? 'dark' : 'default')\r\n              }}>\r\n                {colorMode === 'default' ? 'Light' : 'Dark'}\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <main>{children}</main>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n  \r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n  \r\nexport default Layout","import React from \"react\"\r\n\r\n// @jsx jsx\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst Planet = ({ planet }) => (\r\n  <div>\r\n    <h3>{planet.planetName}</h3>\r\n    <div\r\n      sx = {{\r\n        display: `grid`,\r\n        gridTemplateColumns: `auto 1fr`,\r\n        gridAutoRows: `1.75rem`,\r\n        gridGap: `0 20px`\r\n      }}\r\n    >\r\n      { planet.mass ? <strong>Mass:</strong> : ``}\r\n      { planet.mass ? <span>{planet.mass.toFixed(2)} M<sub>E</sub></span> : ``}\r\n\r\n      <strong>Radius:</strong>\r\n      <span>{planet.radius.toFixed(2)} R<sub>E</sub></span>\r\n\r\n      <strong>Temperature:</strong>\r\n      <span>{planet.temperature} K</span>\r\n\r\n      <strong>Length of Year:</strong>\r\n      <span>{planet.orbit.period.toFixed(2)} Earth Days</span>\r\n\r\n      <strong>Distance From Star:</strong>\r\n      <span>{planet.orbit.semiMajorAxis.toFixed(3)} AU</span>      \r\n\r\n      <strong>Discovery Method:</strong>\r\n      <span>{planet.discoveryMethod}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Planet","import React from \"react\"\r\nimport Planet from \"./planet\"\r\n\r\n// @jsx jsx\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst Star = ({ star }) => (\r\n  <div>\r\n    <h2>\r\n      {star.starName}\r\n    </h2>\r\n    <div\r\n      sx = {{\r\n        display: `grid`,\r\n        gridTemplateColumns: `auto 1fr`,\r\n        gridAutoRows: `1.75rem`,\r\n        gridGap: `0 20px`\r\n      }}\r\n    > \r\n    {console.log(star)}\r\n      <strong>Spectral Classification:</strong>\r\n      <span>{star.spectralType}</span>\r\n\r\n      <strong>Absolute Magnitude:</strong>\r\n      <span>{star.absoluteMagnitude ? star.absoluteMagnitude.toFixed(3) : `0.000`}</span>\r\n\r\n      <strong>Mass:</strong>\r\n      <span>{star.mass ? star.mass.toFixed(3) : `?`} M<sub>Sun</sub></span>\r\n\r\n      <strong>Luminosity:</strong>\r\n      <span>{star.luminosity ? star.luminosity.toFixed(3) : ``} L<sub>Sun</sub></span>\r\n\r\n      <strong>Temperature:</strong>\r\n      <span>{star.temperature} K</span>\r\n    </div>\r\n    <div\r\n      sx={{\r\n        marginLeft: 20\r\n      }}\r\n    >\r\n      {star.planets\r\n        .sort((a, b) => a.orbit.semiMajorAxis < b.orbit.semiMajorAxis ? -1 : 1)\r\n        .map(planet =>\r\n        <Planet key={planet.id} planet={planet}></Planet>\r\n      )}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Star","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst OrbitVisualization = ({star}) => {\r\n  const scale = 99 / Math.max(...star.planets.map(p => p.orbit.semiMajorAxis))\r\n\r\n  return (\r\n    <svg\r\n      width=\"200px\"\r\n      height=\"200px\"\r\n      viewBox=\"0 0 200 200\"\r\n    >\r\n      {star.planets.map(planet => (\r\n        <circle\r\n          key={planet.id} \r\n          stroke=\"black\"\r\n          fill=\"none\"\r\n          cx=\"100\"\r\n          cy=\"100\"\r\n          r={planet.orbit.semiMajorAxis * scale}\r\n        />\r\n      ))}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default OrbitVisualization\r\n","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nconst PlanetSizeVisualizationPlanet = ({ size, xPosition, color, name }) => {\r\n    \r\n  return (\r\n    <g>\r\n      <circle cx={xPosition} cy={100} r={size} fill={color} />\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default PlanetSizeVisualizationPlanet\r\n","import React from 'react'\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\n\r\nimport PlanetSizeVisualizationPlanet from \"./planetSizeVisualizationPlanet\"\r\n\r\nconst scalingFactor = 10;\r\n\r\nconst PlanetSizeVisualization = ({star}) => {\r\n  const planetColorForTemperature = (temperature) => {\r\n    const red = Math.floor(Math.min(255, Math.max(temperature - 300, 0)));\r\n    const blue = Math.floor(Math.max(255 - temperature, 0));\r\n    const green = Math.floor(Math.max(0, 255 - 2 * Math.abs(300 - temperature)));\r\n    return `rgb(${red},${green},${blue})`;\r\n  }\r\n\r\n  let currentPosition = 0;\r\n  const planetVisualizationData = star.planets.map(planet => {\r\n    currentPosition += scalingFactor * planet.radius\r\n    const planetPosition = currentPosition\r\n    currentPosition += scalingFactor * planet.radius + scalingFactor\r\n    return {\r\n      size: scalingFactor * planet.radius,\r\n      xPosition: planetPosition,\r\n      color: planet.temperature ? planetColorForTemperature(planet.temperature) : `#777`\r\n    }\r\n  })\r\n\r\n  return (\r\n    <svg \r\n      width=\"700px\" \r\n      height=\"200px\"\r\n      viewBox=\"0 0 800 200\"\r\n    >\r\n      {planetVisualizationData.map(planet => (\r\n        <PlanetSizeVisualizationPlanet\r\n          key={planet.id}\r\n          size={planet.size}\r\n          xPosition={planet.xPosition}\r\n          color={planet.color}\r\n        />\r\n      ))}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default PlanetSizeVisualization\r\n","import React from \"react\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\nimport OrbitVisualization from \"./orbitVisualization\"\r\nimport PlanetSizeVisualization from \"./planetSizeVisualization\"\r\n\r\nconst SystemVisualization = ({ stars }) => (\r\n  <div sx={{\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"700px 200px\",\r\n    gridTemplateRows: stars.map(_ => \"200px\").join(\" \"),\r\n    gridAutoFlow: \"column\",\r\n    gridGap: 10\r\n  }}>\r\n    {stars.map(star =>\r\n      <PlanetSizeVisualization key={star.starId} star={star} />\r\n    )}\r\n    {stars.map(star =>\r\n      <OrbitVisualization key={star.starId} star={star} />\r\n    )}\r\n  </div>\r\n)\r\n\r\nexport default SystemVisualization","import React from \"react\"\r\nimport Layout from \"./layout\"\r\nimport Star from \"./star\"\r\n\r\n/** @jsx jsx */\r\nimport { jsx } from \"theme-ui\"\r\nimport SystemVisualization from \"./systemVisualization/systemVisualization\"\r\n\r\nexport default ({ pageContext }) => (\r\n  <Layout>\r\n    <h1>{pageContext.name}</h1>\r\n    <strong>Distance to Earth:</strong><span> {pageContext.distance.toFixed(2)} LY</span>\r\n      <SystemVisualization stars={pageContext.stars} />\r\n      {pageContext.stars.map(star =>\r\n        <Star key={star.starId} star={star}></Star>\r\n      )}\r\n  </Layout>\r\n)"],"sourceRoot":""}